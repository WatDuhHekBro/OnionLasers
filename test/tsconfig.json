{
	"compilerOptions":
	{
		// Project Structure //
		"moduleResolution": "node", // Specify how the compiler resolves modules, like going for node_modules first then searching elsewhere. The official docs just say to use this instead of classic.
		
		// Type Settings //
		"strict": true, // Enables all strict checks possible.
		"noImplicitReturns": true, // Makes sure you don't accidentally return something + undefined.
		"noFallthroughCasesInSwitch": true, // Prevents accidentally forgetting to break every switch case. Of course, if you know what you're doing, feel free to add a @ts-ignore, which also signals that it's not a mistake.
		"forceConsistentCasingInFileNames": true, // Make import paths case-sensitive. "./tEst" is no longer the same as "./test".
		"esModuleInterop": true, // Enables compatibility with Node.js' module system since the entire export can be whatever you want. allowSyntheticDefaultImports doesn't address runtime issues and is made redundant by this setting.
		"resolveJsonModule": true, // Allows you to import JSON files just like how you can require() them.
		"lib": ["ES2017"], // Specifies what common libraries you have access to. If you're working in Node.js, you'll want to leave out the DOM library. But do make sure to include "@types/node" because otherwise, variables like "console" won't be defined.
		
		// Output //
		"module": "CommonJS", // Compiles ES6 imports to require() syntax.
		
		// Web Compatibility //
		"target": "ES2017" // ES2017 supports async/await, reducing the amount of compiled code, especially for async-heavy projects.
	}
}